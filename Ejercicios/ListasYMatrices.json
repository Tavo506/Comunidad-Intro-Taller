[
{
   "call":"largo (lista)",
   "creator":"Diego Mora",
   "code":"00027",
   "examples":[
      {
         "call":"largo ([3,5,7,8,[[1],2]])",
         "result":"5",
         "comment":"[[1],2] cuenta como un elemento"
      },
      {
         "call":"largo ([7,2,[1]]) ",
         "result":"3",
         "comment":"La sublista [1] es un elemento"
      },
      {
         "call":"largo ([\"A\",\"E\",\"I\",2,3])",
         "result":"5",
         "comment":"Se pueden combinar los tipos de datos que tiene la lista"
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"resultado",
            "type":"Un entero positivo o cero"
         }
      ],
      "code":"\n# Forma 1\ndef largo (lista):\n\n    resultado = 0\n\n    while lista != []:\n        resultado += 1\n        lista = lista[1:]\n\n    return resultado\n\n# Forma 2\ndef largoFor (lista):\n    resultado = 0\n    \n    for elem in lista:\n        resultado += 1\n\n    return resultado",
      "inputs":[
         {
            "name":"lista",
            "type":"Una lista"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Largo de una lista",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que retorne el largo de una lista."
},
{
   "call":"sumatoria(lista)",
   "creator":"Diego Mora",
   "code":"00028",
   "examples":[
      {
         "call":"sumatoria([1,5,9,4])",
         "result":"19",
         "comment":""
      },
      {
         "call":"sumatoria([5,9,8,8])",
         "result":"30",
         "comment":""
      },
      {
         "call":"sumatoria([1,5,8.9,4])",
         "result":"18.9",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"resultado",
            "type":"Un entero positivo o cero"
         }
      ],
      "code":"# Forma 1    \ndef sumatoria(lista):\n\n    resultado = 0\n    while lista != []:\n        resultado += lista[0]\n        lista = lista[1:]\n\n    return resultado\n\n\n# Forma 2\ndef sumatoriaFor(listaEnteros):\n\n    resultado = 0\n    for numero in listaEnteros:\n        resultado += numero\n\n    return resultado",
      "inputs":[
         {
            "name":"lista",
            "type":"Una lista"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Sumatoria",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que sume todos los elementos numéricos de una lista."
},
{
   "call":"todosPares(lista)",
   "creator":"Diego Mora",
   "code":"00029",
   "examples":[
      {
         "call":"todosPares([1,4,6,2])",
         "result":"False",
         "comment":""
      },
      {
         "call":"todosPares([8,6,2,12])",
         "result":"True",
         "comment":""
      },
      {
         "call":"todosPares([16,26,6,4,2])",
         "result":"True",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"True o False",
            "type":"Un booleno"
         }
      ],
      "code":"def todosPares (lista):\n    for elem in lista:\n        if elem % 2 == 1:\n            return False\n\n    return True",
      "inputs":[
         {
            "name":"lista",
            "type":"Una lista"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Elementos pares",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que retorne True si todos los elementos son pares."
},
{
   "call":"sumaImpares(lista)",
   "creator":"Diego Mora",
   "code":"00030",
   "examples":[
      {
         "call":"sumaImpares([8,7,3,1])",
         "result":"11",
         "comment":""
      },
      {
         "call":"sumaImpares([4,6,9,1])",
         "result":"10",
         "comment":""
      },
      {
         "call":"sumaImpares([2,12,88,54])",
         "result":"0",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"res",
            "type":"Un número entero positivo o cero"
         }
      ],
      "code":"def sumaImpares (lista):\n    res = 0\n    for elem in lista:\n        if elem % 2 == 1:\n            res += elem\n\n    return res\n",
      "inputs":[
         {
            "name":"lista",
            "type":"Una lista"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Suma impares",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que sume los números impares de una lista."
},
{
   "call":"divisoresDe (lista, divisor)",
   "creator":"Diego Mora",
   "code":"00031",
   "examples":[
      {
         "call":"divisoresDe ([4,7,2,9], 3)",
         "result":"1",
         "comment":""
      },
      {
         "call":"divisoresDe ([28,4,7,42,112,9], 14)",
         "result":"3",
         "comment":"28,42 y 112 son divisibles entre 14"
      },
      {
         "call":"divisoresDe ([8,14,7,63,112,1], 7)",
         "result":"4",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"contardor",
            "type":"Un número entero positivo o cero"
         }
      ],
      "code":"def divisoresDe (lista, divisor):\n    if divisor == 0:\n        return 0\n    contador = 0\n\n    for elem in lista:\n        if elem % divisor == 0:\n            contador += 1\n\n    return contador",
      "inputs":[
         {
            "name":"lista",
            "type":"Una lista"
         },
         {
            "name":"divisor",
            "type":"Un número entero positivo"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Cantidad de divisores",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que dada una lista y un divisor, cuente cuantos números son divisibles entre ese divisor."
},
{
   "call":"eliminar(elemento,lista)",
   "creator":"Diego Mora",
   "code":"00032",
   "examples":[
      {
         "call":"eliminar('a',[5,'a',10.2,True,'a','c'])",
         "result":"[5,10.2,True,'c']",
         "comment":""
      },
      {
         "call":"eliminar(True,[True,1,5,'A',True,[True]])",
         "result":"[1,5,'A',[True]]",
         "comment":"El True de la sublista no se borra precisamente por estar en una sublista"
      },
      {
         "call":"eliminar(2,['r',3,7,2,'Active',2])",
         "result":"['r',3,7,'Active']",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"listaResultado",
            "type":"Una lista"
         }
      ],
      "code":"def eliminar (elemento, lista):\n    listaResultado = []\n    for elementoEnLista  in lista:\n        if elementoEnLista != elemento or type(elementoEnLista) != type(elemento):\n            listaResultado += [elementoEnLista]\n\n    return listaResultado\n",
      "inputs":[
         {
            "name":"lista",
            "type":"Una lista"
         },
         {
            "name":"elemento",
            "type":"elemento de cualquier tipo"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Eliminar apariciones",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que elimine las apariciones de un elemento en una lista."
},
{
   "call":"eliminarPrimera(elemento, lista)",
   "creator":"Diego Mora",
   "code":"00033",
   "examples":[
      {
         "call":"eliminarPrimera('a',[5,'a',10.2,True,'a','c'])",
         "result":"[5,10.2,True,'a','c'] ",
         "comment":""
      },
      {
         "call":"eliminarPrimera(True,[True,1,5,'A',True,[True]])",
         "result":"[1,5,'A',True,[True]]",
         "comment":""
      },
      {
         "call":"eliminarPrimera(2,['r',3,7,2,'Active',2])",
         "result":"['r',3,7,'Active',2]",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"listaResultado",
            "type":"Una lista"
         }
      ],
      "code":"# Forma 1\ndef eliminarPrimera (elemento, lista):\n    listaResultado = []\n    encontroPrimero = False\n    \n    for elementoEnLista  in lista:\n        if encontroPrimero or elementoEnLista != elemento:\n            listaResultado += [elementoEnLista]\n        else:   # esto se cumple solo cuando lo encontro y es la primera vez, \n            encontroPrimero = True  #cambia el valor de la bandera\n\n    return listaResultado\n\n# Forma 2\ndef eliminarPrimera2 (elemento, lista):\n    listaResultado = []\n    index = 0\n    for elementoEnLista  in lista:\n        if elementoEnLista != elemento:\n            listaResultado += [elementoEnLista]\n        else:\n            return listaResultado + lista[index+1:]\n        index += 1\n\n    return listaResultado\n",
      "inputs":[
         {
            "name":"lista",
            "type":"Una lista"
         },
         {
            "name":"elemento",
            "type":"elemento de cualquier tipo"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Eliminar primera aparicion",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que elimine la primer aparición de un elemento en una lista."
},
{
   "call":"getMax(lista)",
   "creator":"Diego Mora",
   "code":"00034",
   "examples":[
      {
         "call":"getMax([6,8,2,10])",
         "result":"10",
         "comment":""
      },
      {
         "call":"getMax([76,8,2,19,18])",
         "result":"76",
         "comment":""
      },
      {
         "call":"getMax([0,5,1,7,43,21])",
         "result":"43",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"currentMax",
            "type":"Un número entero positivo o cero"
         }
      ],
      "code":"def getMax(lista):\n\n    currentMax = lista[0]\n\n    for num in lista[1:]:\n        if num > currentMax:\n            currentMax = num\n\n    return currentMax",
      "inputs":[
         {
            "name":"lista",
            "type":"Una lista"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Mayor en lista",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que retorne el numero mayor de una lista sin usar la función MAX."
},
{
   "call":"getMin(lista)",
   "creator":"Diego Mora",
   "code":"00035",
   "examples":[
      {
         "call":"getMin([6,8,2,10])",
         "result":"2",
         "comment":""
      },
      {
         "call":"getMin([76,8,2,19,18])",
         "result":"2",
         "comment":""
      },
      {
         "call":"getMin([0,5,1,7,43,21])",
         "result":"0",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"currentMin",
            "type":"Un número entero positivo o cero"
         }
      ],
      "code":"def getMin(lista):\n\n    currentMin = lista[0]\n\n    for num in lista[1:]:\n        if num < currentMin:\n            currentMin = num\n\n    return currentMin\n",
      "inputs":[
         {
            "name":"lista",
            "type":"Una lista"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Menor en lista",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que retorne el numero menor de la lista sin usar MIN."
},
{
   "call":"substitute(original, newValue, sequence)",
   "creator":"Diego Mora",
   "code":"00036",
   "examples":[
      {
         "call":"substitute('a', 65, [1, 'a', 'a', True, 2, 56])",
         "result":"[1, 65, 65, True, 2, 56] ",
         "comment":""
      },
      {
         "call":"substitute(10, 'X', [10, 'XI', 'XII', 13, 10, 10])",
         "result":"['X', 'XI', 'XII', 13, 'X', 'X']",
         "comment":""
      },
      {
         "call":"substitute(5, 'Cinco', ['1', 2, '5', 5, 6, 'Cinco'])",
         "result":"['1', 2, '5', 'Cinco', 6, 'Cinco']",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"result",
            "type":"Una lista"
         }
      ],
      "code":"def substitute(original, newValue, sequence):\n    result = []\n    for element in sequence:\n        if element == original:\n            result += [newValue]\n        else:\n            result += [element]\n\n    return result",
      "inputs":[
         {
            "name":"lista",
            "type":"Una lista"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Sustituir",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que sustituya un elemento por otro, en una lista. "
},
{
   "call":"toNumber(sequence)",
   "creator":"Diego Mora",
   "code":"00037",
   "examples":[
      {
         "call":"toNumber([-10,-256,32,10,0,1])",
         "result":"10256321001",
         "comment":""
      },
      {
         "call":"toNumber([909,-87,431,11])",
         "result":"9098743111",
         "comment":""
      },
      {
         "call":"toNumber([5,-3,-90,-1,-9]) ",
         "result":"539019",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"result",
            "type":"Un número entero positivo"
         }
      ],
      "code":"\ndef toNumber (sequence):\n    result = 0\n\n    for number in sequence:\n        result = result * (10**getNumberLength(abs(number))) + abs(number)\n\n    return result\n\n#integer number digits count\ndef getNumberLength(num):\n    counter = 1\n    while num >= 10:\n        counter += 1\n        num \/\/= 10\n    return counter\n",
      "inputs":[
         {
            "name":"sequence",
            "type":"Una lista de números enteros positivos o negativos."
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Convertir a un solo número",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que una una lista de números en un solo número, los elementos deben ser números enteros positivos o negativos."
},
{
   "call":"descomponer(lista)",
   "creator":"Diego Mora",
   "code":"00038",
   "examples":[
      {
         "call":"descomponer([909,-87,431,11,0])",
         "result":"[[-87], [0], [909, 431, 11]]",
         "comment":""
      },
      {
         "call":"descomponer([0,-9,0,11,0,4,98,-25])",
         "result":"[[-9, -25], [0, 0, 0], [11, 4, 98]",
         "comment":""
      },
      {
         "call":"descomponer([-76,-90,-2,0,1,0,3,0,82.2])",
         "result":"[[-76, -90, -2], [0, 0, 0], [1, 3, 82.2]]",
         "comment":"Puden haber números con fracción decimal"
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"Una lista",
            "type":"Lista con tres listas"
         }
      ],
      "code":"def descomponer(lista):\n    negativos = []\n    positivos = []\n    ceros = []\n\n    for num in lista:\n        if num > 0:\n            positivos.append(num) # positivos += [num]\n        elif num < 0:\n            negativos.append(num) # negativos += [num]\n        else:\n            ceros.append(num)  # ceros += [num]\n\n    return [negativos, ceros, positivos]\n",
      "inputs":[
         {
            "name":"lista",
            "type":"Una lista con números"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Descomponer lista",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que descomponga un lista en una lista de positivos, una de negativos y una de ceros, y las retorne en una sola lista. "
},
{
   "call":"crearLista (elemento, veces)",
   "creator":"Diego Mora",
   "code":"00039",
   "examples":[
      {
         "call":"crearLista(3, 6)",
         "result":"[3, 3, 3, 3, 3]",
         "comment":""
      },
      {
         "call":"crearLista('Hello world', 3)",
         "result":"['Hello world', 'Hello world', 'Hello world']",
         "comment":""
      },
      {
         "call":"crearLista(['IC1802'], 4)",
         "result":"[['IC1802'], ['IC1802'], ['IC1802'], ['IC1802']]",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"resultado",
            "type":"Una lista"
         }
      ],
      "code":"Forma 1\ndef crearLista (elemento, veces):\n    resultado = []\n    while veces > 0:\n        resultado += [elemento]\n        veces -= 1\n    return resultado\n\n# Forma 2\ndef crearListaFor (elemento, veces):\n    resultado = []\n    for i in range (veces):\n        resultado += [elemento]\n        \n    return resultado\n",
      "inputs":[
         {
            "name":"elemento",
            "type":"Elemento de cualquier tipo"
         },
         {
            "name":"veces",
            "type":"Un número entero positivo"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Crear lista",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que retorne una lista con un elemento repetido n veces"
},
{
   "call":"multiplicar(lista, elemBuscado, veces)",
   "creator":"Diego Mora",
   "code":"00040",
   "examples":[
      {
         "call":"multiplicar([1,2,34], 2, 5)",
         "result":"[1, 2, 2, 2, 2, 2, 34]",
         "comment":""
      },
      {
         "call":"multiplicar(['j',6,8,10,'a'],'a', 3)",
         "result":"['j', 6, 8, 10, 'a', 'a', 'a']",
         "comment":""
      },
      {
         "call":"multiplicar([3,[4],5,'six',True],True,2)",
         "result":"[3, [4], 5, 'six', True, True]",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"resultado",
            "type":"Una lista"
         }
      ],
      "code":"def multiplicar(lista, elemBuscado, veces):\n    resultado = []\n    for elem in lista:\n        if elem == elemBuscado:\n            resultado += [elem]*veces #crearLista(elem, veces)\n        else:\n            resultado += [elem]\n\n    return resultado",
      "inputs":[
         {
            "name":"lista",
            "type":"Una lista"
         },
         {
            "name":"elemBuscado",
            "type":"elemento de cualquier tipo"
         },
         {
            "name":"veces",
            "type":"Un número entero positivo"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Multiplicar elemento",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que multiplique un elemento de una lista, n veces."
},
{
   "call":"getGradesAverage(listaDeNotas)",
   "creator":"Diego Mora",
   "code":"00041",
   "examples":[
      {
         "call":"getGradesAverage([90,80,100,90,100,45])",
         "result":"84.16 ",
         "comment":""
      },
      {
         "call":"getGradesAverage([60,45,69,100])",
         "result":"68.5",
         "comment":""
      },
      {
         "call":"getGradesAverage([90,54,92,100,98])",
         "result":"86.8",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"Un número",
            "type":"Un número fraccionario o cero"
         }
      ],
      "code":"def getGradesAverage(listaDeNotas):\n    if len(listaDeNotas) != 0:\n        return sumatoria (listaDeNotas) \/ len (listaDeNotas)\n    return 0\n    ",
      "inputs":[
         {
            "name":"lista",
            "type":"Una lista de notas"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Obtener promedio",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que retorne el promedio de los valores de la lista."
},
{
   "call":"getAverage(lista)",
   "creator":"Diego Mora",
   "code":"00042",
   "examples":[
      {
         "call":"getAverage([[\"Diego\", \"En curso\", [90,80,100,90], 90],[\"Ana\", \"En curso\", [90,0,0,80], 90]])",
         "result":"66.25",
         "comment":""
      },
      {
         "call":"getAverage([[\"Fede\", \"En curso\", [70,70,70,0], 90],[\"Allen\", \"En curso\", [90,90,90,90], 90]])",
         "result":"71.25",
         "comment":""
      },
      {
         "call":"getAverage([[\"Allen\", \"En curso\", [90,90,90,90], 90],[\"Tony\", \"En curso\", [85,80,95,99], 90],[\"Lucas\", \"En curso\", [100,100,100,97], 90]])",
         "result":"93.0",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"Un número",
            "type":"Un número fraccionario o cero"
         }
      ],
      "code":"def getAverage(lista):\n\n    sumaDeNotas = 0\n    cantidadDeNotas = 0\n\n    for estudiante in lista:\n        # Se hacer uso de una funcion que anteriormente se había programado, sumatoria(lista).\n        sumaDeNotas += sumatoria (estudiante[2])\n        cantidadDeNotas += len(estudiante[2])\n\n    if cantidadDeNotas > 0:\n        return sumaDeNotas \/ cantidadDeNotas\n    else:\n        return 0",
      "inputs":[
         {
            "name":"lista",
            "type":"Una lista con formato estudiante"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Obtener promedio general",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que obtenga la suma de todas las notas,cantidad de notas y saque el promedio general.\nRecibe una lista con formato estudiante, es decir [[\"Nombre\", \"Estado(En curso\/Aprobado\/Reprobado)\", [Nota1,Nota2,Nota3,...], NotaFinal]], donde las notas son número enteros o fraccionarios."
},
{
   "call":"actualizarEstado(lista)",
   "creator":"Diego Mora",
   "code":"00043",
   "examples":[
      {
         "call":"actualizarEstado([[\"Diego\", \"En curso\", [90,80,100,90], 90],[\"Ana\", \"En curso\", [90,0,0,80], 90]])",
         "result":"[['Diego', 'Aprobado', [90, 80, 100, 90], 90.0], ['Ana', 'Reprobado', [90, 0, 0, 80], 42.5]]",
         "comment":""
      },
      {
         "call":"actualizarEstado([[\"Fede\", \"En curso\", [70,70,70,0], 90],[\"Allen\", \"En curso\", [90,90,90,90], 90]])",
         "result":"[['Fede', 'Reprobado', [70, 70, 70, 0], 52.5], ['Allen', 'Aprobado', [90, 90, 90, 90], 90.0]]",
         "comment":""
      },
      {
         "call":"actualizarEstado([[\"Allen\", \"En curso\", [90,90,90,90], 90],[\"Tony\", \"En curso\", [85,80,95,99], 90],[\"Lucas\", \"En curso\", [100,100,100,97], 90]])",
         "result":"[['Allen', 'Aprobado', [90, 90, 90, 90], 90.0], ['Tony', 'Aprobado', [85, 80, 95, 99], 89.75], ['Lucas', 'Aprobado', [100, 100, 100, 97], 99.25]]",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"lista",
            "type":"La lista actualizada"
         }
      ],
      "code":"def actualizarEstado(lista):\n    for estudiante in lista:\n        estudiante[3] = getGradesAverage(estudiante[2])\n        if estudiante[3] >= 67.5:\n            estudiante[1] = 'Aprobado'\n        else:\n            estudiante[1] = 'Reprobado'\n\n    return lista",
      "inputs":[
         {
            "name":"lista",
            "type":"Una lista con formato estudiante"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Actulizar estado",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que actualice el estado y la nota final del curso de cada estudiante según su promedio, haciendo uso de la función getGradesAverage(listaDeNotas) realizada en un ejercicio anterior.\nRecibe una lista con formato estudiante, es decir [[\"Nombre\", \"Estado(En curso\/Aprobado\/Reprobado)\", [Nota1,Nota2,Nota3,...], NotaFinal]], donde las notas son número enteros o fraccionarios."
},
{
   "call":"apariciones (elemento, lista)",
   "creator":"Diego Mora",
   "code":"00044",
   "examples":[
      {
         "call":"apariciones('a',[5,'a',10.2,True,'a','c'])",
         "result":"2",
         "comment":""
      },
      {
         "call":"apariciones(True,[True,1,5,'A',True,[True]])",
         "result":"3",
         "comment":""
      },
      {
         "call":"apariciones(2,['r',2,2,3,7,2,'Active',2])",
         "result":"4",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"resultado",
            "type":"Un número entero positivo o cero"
         }
      ],
      "code":"def apariciones (elemento, lista):\n\n    resultado = 0\n    for elem in lista:\n        if elem == elemento:\n            resultado += 1\n    return resultado",
      "inputs":[
         {
            "name":"elemento",
            "type":"Un elemento de cualquier tipo"
         },
         {
            "name":"lista",
            "type":"Una lista"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Cantidad de apariciones",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que retorne la cantidad de veces que aparece un elemento en una lista."
},
{
   "call":"esConjunto (lista)",
   "creator":"Diego Mora",
   "code":"00045",
   "examples":[
      {
         "call":"esConjunto ([1,5,7,3,2])",
         "result":"True",
         "comment":""
      },
      {
         "call":"esConjunto ([1,5,[1,7],[1,7],0,[9]])",
         "result":"False",
         "comment":""
      },
      {
         "call":"esConjunto ([7,3,2,90,56])",
         "result":"True",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"True o False",
            "type":"Un booleano"
         }
      ],
      "code":"def esConjunto (lista):\n\n    for elem in lista:\n        # Usando una función programada en un ejercicio anterior\n        if apariciones(elem,lista)>1:\n            return False\n    return True",
      "inputs":[
         {
            "name":"lista",
            "type":"Una lista"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Es conjunto",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que retorna si la lista es conjunto , es decir si no tiene elementos repetidos"
},
{
   "call":"sonIguales(conjunto1,conjunto2)",
   "creator":"Diego Mora",
   "code":"00046",
   "examples":[
      {
         "call":"sonIguales([898,65,3,8,0],[65,3,8,0,898])",
         "result":"True",
         "comment":""
      },
      {
         "call":"sonIguales(['r',4,7,'r'],['r',4,7,'r'])",
         "result":"False",
         "comment":""
      },
      {
         "call":"sonIguales([87,9,1,2,4],[87,9,3,2,4])",
         "result":"False",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"rue o False",
            "type":"Un booleano"
         }
      ],
      "code":"def sonIguales(conjunto1,conjunto2):\n    #Usando la funcion esConjunto(lista) anteriormente realizada\n    if(esConjunto(conjunto1) and esConjunto(conjunto2)):\n        if len(conjunto1) != len (conjunto2):\n            return False\n        for elem in conjunto1:\n            if elem not in conjunto2:\n                return False\n        return True\n    return False",
      "inputs":[
         {
            "name":"conjunto1",
            "type":"Una lista"
         },
         {
            "name":"conjunto2",
            "type":"Una lista"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Conjuntos iguales",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que retorne True si los dos conjuntos son iguales"
},
{
   "call":"unionConjuntos(conjunto1,conjunto2)",
   "creator":"Diego Mora",
   "code":"00047",
   "examples":[
      {
         "call":"unionConjuntos([1,2,3,4,5],[5,6,7])",
         "result":"[1, 2, 3, 4, 5, 6, 7] ",
         "comment":""
      },
      {
         "call":"unionConjuntos(['e',[4],8,0,'i'],['a','o',[4],8,0,'u'])",
         "result":"['e', [4], 8, 0, 'i', 'a', 'o', 'u']",
         "comment":""
      },
      {
         "call":"unionConjuntos([87,9,1,2,4],[87,9,3,2,4])",
         "result":"[87, 9, 1, 2, 4, 3]",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"conjunto",
            "type":"Una lista"
         }
      ],
      "code":"# Forma 1\ndef unionConjuntos(conjunto1,conjunto2):\n    \n    sumando = []\n    for elem in conjunto2:\n        if elem not in conjunto1:\n            sumando += [elem]\n    return conjunto1 + sumando\n\n# Forma 2\ndef union (conj1, conj2):\n    \n    resultado = conj1\n    for elem in conj2:\n        #Si no esta (elem, resultado):\n        if elem not in resultado:\n            resultado += [elem]\n            #Lo mismo que --> resultado.append(elem)\n\n    return resultado",
      "inputs":[
         {
            "name":"conjunto1",
            "type":"Una lista"
         },
         {
            "name":"conjunto2",
            "type":"Una lista"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Union de dos conjuntos",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que genera un conjunto constituido por la union de los dos conjuntos"
},
{
   "call":"interseccionConjuntos(conjunto1,conjunto2)",
   "creator":"Diego Mora",
   "code":"00048",
   "examples":[
      {
         "call":"interseccionConjuntos([1,2,3,4,5],[9,6,7])",
         "result":"[]",
         "comment":""
      },
      {
         "call":"interseccionConjuntos(['e',[4],8,0,'i'],['a','o',[4],8,0,'u'])",
         "result":"[[4], 8, 0]",
         "comment":""
      },
      {
         "call":"interseccionConjuntos([87,9,1,2,4],[87,9,3,2,4])",
         "result":"[87, 9, 2, 4]",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"conjunto",
            "type":"Una lista"
         }
      ],
      "code":"def interseccionConjuntos(conjunto1,conjunto2):\n    sumando = []\n    for elem in conjunto2:\n        if elem in conjunto1:\n            sumando += [elem]\n            #Lo mismo que --> resultado.append (elem)\n    return sumando",
      "inputs":[
         {
            "name":"conjunto1",
            "type":"Una lista"
         },
         {
            "name":"conjunto2",
            "type":"Una lista"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Interseccion de conjuntos",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que genere un conjunto constituido por la interseccion de los dos conjuntos "
},
{
   "call":"restrestaConjuntos(conjunto1,conjunto2)",
   "creator":"Diego Mora",
   "code":"00049",
   "examples":[
      {
         "call":"restaConjuntos(['e',[4],8,0,'i'],['a','o',[4],8,0,'u'])",
         "result":"['e', 'i']",
         "comment":""
      },
      {
         "call":"restaConjuntos([5,78,2,90,3],[78,9,3,21])",
         "result":"[5, 2, 90]",
         "comment":""
      },
      {
         "call":"restaConjuntos([12,54,67,90],[54,90,12,67])",
         "result":"[]",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"conjunto",
            "type":"Una lista"
         }
      ],
      "code":"def restaConjuntos(conjunto1,conjunto2):\n    sumando = []\n    for elem in conjunto1:\n        if elem not in conjunto2:\n            sumando += [elem]\n            #Lo mismo que --> resultado.append (elem) \n\n    return sumando",
      "inputs":[
         {
            "name":"conjunto1",
            "type":"Una lista"
         },
         {
            "name":"conjunto2",
            "type":"Una lista"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Resta de conjuntos",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que genere un conjunto constituido por la resta de los elementos del primer conjunto que esten en el segundo conjunto"
},
{
   "call":"vectoresIguales (v1, v2)",
   "creator":"Diego Mora",
   "code":"00050",
   "examples":[
      {
         "call":"vectoresIguales ([6,8,3],[6,8,3])",
         "result":"True",
         "comment":""
      },
      {
         "call":"vectoresIguales ([6,8,3],[6,8,2])",
         "result":"False",
         "comment":""
      },
      {
         "call":"vectoresIguales ([7,4,5],[1,5,90])",
         "result":"False",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"True o False",
            "type":"Un booleano"
         }
      ],
      "code":"def vectoresIguales (v1, v2):\n    return v1 == v2",
      "inputs":[
         {
            "name":"v1",
            "type":"Una lista"
         },
         {
            "name":"v2",
            "type":"Una lista"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Vectores iguales",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que verifique si dos vectores son iguales"
},
{
   "call":"esVectorNulo (vector)",
   "creator":"Diego Mora",
   "code":"00051",
   "examples":[
      {
         "call":"esVectorNulo ([])",
         "result":"True",
         "comment":""
      },
      {
         "call":"esVectorNulo ([1])",
         "result":"False",
         "comment":""
      },
      {
         "call":"esVectorNulo ([0,1])",
         "result":"False",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"True o False",
            "type":"Un booleano"
         }
      ],
      "code":"def esVectorNulo (vector):\n\n    for i in vector:\n        if i != 0:\n            return False\n    return True\n\n",
      "inputs":[
         {
            "name":"lista",
            "type":"Una lista"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Vector nulo",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que verifique si un vector es nulo."
},
{
   "call":"sumarVectores (v1, v2)",
   "creator":"Diego Mora",
   "code":"00052",
   "examples":[
      {
         "call":"sumarVectores ([1,2,3],[10,11,12])",
         "result":"[11,13,15]",
         "comment":""
      },
      {
         "call":"sumarVectores ([4,6,7],[23,65,1])",
         "result":"[27, 71, 8]",
         "comment":""
      },
      {
         "call":"sumarVectores ([6,34,1,8],[0,6,43,2])",
         "result":"[6, 40, 44, 10]",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"True o False",
            "type":"Un booleano"
         }
      ],
      "code":"def sumarVectores (v1, v2):\n    resultado = []\n\n    for i in range(len (v1)):\n        #print (\"i: \", i, v1[i] , v2[i], v1[i] + v2[i])\n        resultado.append(v1[i] + v2[i])\n        #Lo mismo que --> resultado += [v1[i] + v2[i]]\n\n    return resultado\n",
      "inputs":[
         {
            "name":"v1",
            "type":"Una lista"
         },
         {
            "name":"v2",
            "type":"Una lista"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Suma de vectores",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que retorne la suma de dos vectores de igual orden"
},
{
   "call":"multiplicarVectores (v1, v2)",
   "creator":"Diego Mora",
   "code":"00053",
   "examples":[
      {
         "call":"multiplicarVectores ([1,2,3],[10,11,12])",
         "result":"68",
         "comment":""
      },
      {
         "call":"multiplicarVectores ([4,6,7],[23,65,1])",
         "result":"489",
         "comment":""
      },
      {
         "call":"multiplicarVectores ([6,34,1,8],[0,6,43,2]) ",
         "result":"263",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"resultado",
            "type":"Un número"
         }
      ],
      "code":"def multiplicarVectores (v1, v2):\n    resultado = 0\n\n    for i in range(len(v1)):\n        resultado += v1[i] * v2[i]\n        #print (\"i: \", i, v1[i] , v2[i], v1[i] * v2[i], resultado)\n\n    return resultado",
      "inputs":[
         {
            "name":"v1",
            "type":"Una lista"
         },
         {
            "name":"v2",
            "type":"Una lista"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Multiplicacion de vectores",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que retorne la multiplicacion de dos vectores de mismo orden"
},
{
   "call":"esCuadrada(matriz)",
   "creator":"Diego Mora",
   "code":"00054",
   "examples":[
      {
         "call":"esCuadrada([[1,2,3],[4,5,7],[9,10,11]])",
         "result":"True",
         "comment":""
      },
      {
         "call":"esCuadrada([[1,2],[4,5,7],[9,10,11]])",
         "result":"False",
         "comment":""
      },
      {
         "call":"esCuadrada([[1,2],[5,7]])",
         "result":"True",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"True o False",
            "type":"Un booleano"
         }
      ],
      "code":"def esCuadrada(matriz):\n    return len(matriz) == len (matriz[0])",
      "inputs":[
         {
            "name":"matriz",
            "type":"Una matriz"
         }
      ]
   },
   "level":"1",
   "created":"2021-06-09",
   "name":"Matriz cuadrada",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que retorne True si la matriz es cuadrada"
},
{
  "call": "getDiagonal (matriz)",
  "creator": "Diego Mora",
  "code": "00055",
  "examples": [
    {
      "call": "getDiagonal([[1,2,3],[4,5,7],[9,10,11]])",
      "result": "[1, 5, 11] ",
      "comment": ""
    },
    {
      "call": "getDiagonal([[1,2],[5,7]])",
      "result": "[1, 7]",
      "comment": ""
    },
    {
      "call": "getDiagonal([[1,5,3,4],[1,8,5,73],[4,9,10,11],[5,2,1,0]])",
      "result": "[1, 8, 10, 0]",
      "comment": ""
    }
  ],
  "solution": {
    "outputs": [
      {
        "name": "diagonal",
        "type": "Una lista"
      }
    ],
    "code": "def getDiagonal (matriz):\n    diagonal = []\n    for i in range (len(matriz)):\n        diagonal.append(matriz[i][i])\n        #Es lo mismo que --> diagonal += [matriz[i][i]]\n    return diagonal\n",
    "inputs": [
      {
        "name": "matriz",
        "type": "Una matriz cuadrada"
      }
    ]
  },
  "level": "1",
  "created": "2021-06-09",
  "name": "Obtener diagonal",
  "section": "Listas, vectores y matrices",
  "details": "Realice un programa que retorne la diagonal de una matriz cuadrada"
},
{
  "call": "validarMatriz(matriz)",
  "creator": "Diego Mora",
  "code": "00056",
  "examples": [
    {
      "call": "validarMatriz([[1,2,3],[4,5,7],[9,10,11]])",
      "result": "True",
      "comment": ""
    },
    {
      "call": "validarMatriz([[2,3],[4,5,7],[9,10,11]])",
      "result": "False",
      "comment": ""
    },
    {
      "call": "validarMatriz([[5,78,9,3],[4,5,7,5],[9,1,0,78]])",
      "result": "True",
      "comment": ""
    }
  ],
  "solution": {
    "outputs": [
      {
        "name": "True o False",
        "type": "Un booleano"
      }
    ],
    "code": "# Foma 1\ndef validarMatriz(matriz):\n    if len(matriz) == 0:\n        return False\n\n    tamano = len(matriz[0])\n    for fila in matriz:\n        if len(fila) != tamano or fila == []:\n            return False\n\n    return True\n\n# Foma 2\ndef validarMatriz2(M):\n    if len(M) == 0:\n        return False\n\n    for i in range(len(M)-1):\n        print (i, i+1, M[i], M[i+1], len(M[i]), len(M[i+1]))\n        if len(M[i]) != len(M[i+1]):\n            return False\n    return True\n",
    "inputs": [
      {
        "name": "matriz",
        "type": "Una matriz "
      }
    ]
  },
  "level": "1",
  "created": "2021-06-09",
  "name": "Validar matriz",
  "section": "Listas, vectores y matrices",
  "details": "Realice un programa que retorne True si todas las filas tienen la misma cantidad de columnas"
},
{
   "call":"getContradiagonal(M)",
   "creator":"Diego Mora",
   "code":"00057",
   "examples":[
      {
         "call":"getContradiagonal([[1,2,3],[4,5,7],[9,10,11]])",
         "result":"[3, 5, 9]",
         "comment":""
      },
      {
         "call":" getContradiagonal([[1,2],[5,7]])",
         "result":"[2, 5]",
         "comment":""
      },
      {
         "call":"getContradiagonal([[1,5,3,4],[1,8,5,73],[4,9,10,11],[5,2,1,0]])",
         "result":"[4, 5, 9, 5]",
         "comment":""
      }
   ],
   "solution":{
      "outputs":[
         {
            "name":"contraD",
            "type":"Una lista"
         }
      ],
      "code":"\n# Forma 1\ndef getContradiagonal(M):\n    fila = 0\n    columna = len(M)-1\n    contraD = []\n\n    for i in range(len(M)):\n        #print (fila, columna, M[fila][columna])\n        contraD.append(M[fila][columna])\n        fila += 1\n        columna -= 1\n\n    return contraD\n\n# Forma 2\ndef getContradiagonal2(M):\n    columna = len(M)-1\n    contraD = []\n\n    for fila in M:\n        #print (fila, columna, fila[columna])\n        contraD.append(fila[columna])\n        columna -= 1\n\n    return contraD\n\n# Forma 3\ndef getContradiagonal3(M):\n    contraD = []\n    for i in range(len(M)):\n        #print (i, (len(M)-1)-i, M[i][(len(M)-1)-i], \"len(M)-1)-i\")\n        contraD.append(M[i][(len(M)-1)-i])\n    return contraD\n",
      "inputs":[
         {
            "name":"M",
            "type":"Una matriz cuadrada"
         }
      ]
   },
   "level":"2",
   "created":"2021-06-09",
   "name":"Diagonal inversa",
   "section":"Listas, vectores y matrices",
   "details":"Realice un programa que retorne la contra diagonal de la matriz cuadrada "
},
{
  "call": "getColumn(M, columnNbr)",
  "creator": "Diego Mora",
  "code": "00058",
  "examples": [
    {
      "call": "getColumn([[1,2,3],[4,5,7],[9,10,11]],2)",
      "result": "[3, 7, 11]",
      "comment": ""
    },
    {
      "call": "getColumn([[1,5,3,4],[1,8,5,73],[4,9,10,11],[5,2,1,0]],1)",
      "result": "[5, 8, 9, 2]",
      "comment": ""
    },
    {
      "call": "getColumn([[11,15,32,5],[6,84,5,7])",
      "result": "[11, 6]",
      "comment": ""
    }
  ],
  "solution": {
    "outputs": [
      {
        "name": "column",
        "type": "Una lista "
      }
    ],
    "code": "def getColumn(M, columnNbr):\n    column = []\n\n    for fila in M:\n        column.append(fila[columnNbr])\n    return column\n",
    "inputs": [
      {
        "name": "M",
        "type": "Una matriz"
      },
      {
        "name": "columnNbr",
        "type": "Un número entero que indica la columna"
      }
    ]
  },
  "level": "1",
  "created": "2021-06-09",
  "name": "Obtener columna",
  "section": "Listas, vectores y matrices",
  "details": "Realice un programa que retorne una columna solicitada"
},
{
  "call": "vectorPorMatriz (vector, M)",
  "creator": "Diego Mora",
  "code": "00059",
  "examples": [
    {
      "call": "vectorPorMatriz([3,5,6],[[1,2,3],[4,5,7],[9,10,11]])",
      "result": "[77, 91, 110] ",
      "comment": ""
    },
    {
      "call": "vectorPorMatriz([3,6],[[3,5],[3,7],[2,1],[0,9]])",
      "result": "[27, 57]",
      "comment": ""
    },
    {
      "call": "vectorPorMatriz([3,6,6,1],[[2,1],[12,9],[67,3],[0,0]])",
      "result": "[480, 75]",
      "comment": ""
    }
  ],
  "solution": {
    "outputs": [
      {
        "name": "vectorResultado",
        "type": "Una lista"
      }
    ],
    "code": "def vectorPorMatriz (vector, M):\n\n    #obtiene el largo de la fila 0 que es las columans\n    cantidadColumnas = len(M[0])\n    vectorResultado = []\n    for col in range (cantidadColumnas):\n        columnaActual = getColumn(M, col)\n        multiplicacion = multiplicarVectores (vector, columnaActual)\n        vectorResultado.append (multiplicacion)\n        print (col, columnaActual, multiplicacion, vectorResultado)\n\n    return vectorResultado",
    "inputs": [
      {
        "name": "V",
        "type": "Una lista"
      },
      {
        "name": "M",
        "type": "Una matriz"
      }
    ]
  },
  "level": "2",
  "created": "2021-06-09",
  "name": "Multiplicación vector-matriz",
  "section": "Listas, vectores y matrices",
  "details": "Realice un programa que multiplique un vector por una matriz, recordando la propiedad que permite la multiplicación de matrices."
},
{
  "call": "multiplicarMatrices (M1, M2)",
  "creator": "Diego Mora",
  "code": "00060",
  "examples": [
    {
      "call": "multiplicarMatrices([[1,2,3],[4,5,7]],[[9,10],[91,0],[1,2]])",
      "result": "[[194, 16], [498, 54]]",
      "comment": ""
    },
    {
      "call": "multiplicarMatrices([[2,0],[5,9]],[[0,1,2,3,4],[1,0,3,12,5]])",
      "result": "[[0, 2, 4, 6, 8], [9, 5, 37, 123, 65]]",
      "comment": ""
    },
    {
      "call": "multiplicarMatrices([[1,1,1,1],[0,5,2,1]],[[4,10],[6,0],[1,2],[0,0]])",
      "result": "[[11, 12], [32, 4]]",
      "comment": ""
    }
  ],
  "solution": {
    "outputs": [
      {
        "name": "res",
        "type": "Una matriz"
      }
    ],
    "code": "def multiplicarMatrices (M1, M2):\n    res = []\n\n    for fila in M1:\n        res.append(vectorPorMatriz(fila, M2))\n    return res",
    "inputs": [
      {
        "name": "M1",
        "type": "Una matriz"
      },
      {
        "name": "M2",
        "type": "Una matriz"
      }
    ]
  },
  "level": "2",
  "created": "2021-06-09",
  "name": "Multiplica matrices",
  "section": "Listas, vectores y matrices",
  "details": "Realice un programa que multiplique dos matrices nxp y pxm, puede hacer uso de alguno de los programas hechos anteriormente.\n"
}
]